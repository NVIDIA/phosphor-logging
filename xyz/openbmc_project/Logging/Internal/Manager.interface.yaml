description: >
    Implement to provide event/error logging management features.
    This interface should be instantiated for the phosphor::logging namespace,
    and only one is required.
methods:
    - name: Commit
      description: >
          Write the requested error/event entry with its associated metadata
          fields to flash. The "level" of the committed error log is same as the
          level defined in error YAML definitions.
      parameters:
        - name: transactionId
          type: uint64
          description: >
              The unique identifier of the journal entry(ies) to be committed.
        - name: errMsg
          type: string
          description: >
              The error exception message associated with the error
              event log to be committed.
      returns:
        - name: entryID
          type: uint32
          description: >
            The ID of the entry.
    - name: CommitWithLvl
      description: >
          Write the requested error/event entry with its associated metadata
          fields to flash. This interface allows the caller to override the
          error level specified in the error YAML definition.
      parameters:
        - name: transactionId
          type: uint64
          description: >
              The unique identifier of the journal entry(ies) to be committed.
        - name: errMsg
          type: string
          description: >
              The error exception message associated with the error
              event log to be committed.
        - name: errLvl
          type: uint32
          description: >
              The error level/severity indicator.
      returns:
        - name: entryID
          type: uint32
          description: >
            The ID of the entry.
    - name: RFSendEvent
      description: >
          Write the dbus log when resource created/deleted/modified or
          rebooted. The dbus log will be picked by the RF event framework
          and generates the event.
      parameters:
        - name: RFMessage
          type: string
          description: >
              The Redfish Message property of the event entry.
        - name: RFSeverity
          type: enum[xyz.openbmc_project.Logging.Entry.Level]
          description: >
              The Severity property of the event entry.
        - name: RFAdditionalData
          type: dict[string, string]
          description: >
              The AdditionalData property of the event entry.
                              e.g.:
                                {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              ends up in AdditionaData like:
                                ["KEY1=value1", "KEY2=value2"]
                                The keys supported by the RF event framework are:
                                REDFISH_MESSAGE_ID
                                REDFISH_MESSAGE_ARGS
                                REDFISH_ORIGIN_OF_CONDITION
                                The Value of REDFISH_MESSAGE_ID example: "Base.1.15.PropertyValueModified"
                                The Value of REDFISH_MESSAGE_ARGS example:  "["arg0", "arg1"]" if more than two arguments then its format is 
                                                              "["arg0", "arg1", "arg2", "arg3" .....]"
                                The Value of REDFISH_ORIGIN_OF_CONDITION  dbus object path example: "/xyz/openbmc_project/user/test_user"

